/*
 * Copyright (C) 2021 The Zion Authors
 * This file is part of The Zion library.
 *
 * The Zion is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Zion is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The Zion.  If not, see <http://www.gnu.org/licenses/>.
 */

package eth

import (
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/polynetwork/nft-contracts/go_abi/nft_lock_proxy_abi"
	"strings"
	"testing"
)

func TestUnpack(t *testing.T) {
	input := "0xd450e04c00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000faf92069052391130aae5194ddcc814b4df70ad3bd6f9674f47ccc7324f1f561e920ef020000000000000020000000000000000000000000000000000000000000000000000000000000220d2094ad4a55638d482b1dd5b71f97912001e4303d232a32cd40ca08c531aca01d29149bef1ae7304d3d2f344ea00e796ada18ce1beb036b00000000000000146e5fb68d6b705a567d75135169cf69574225ebe606756e6c6f636b5414000000000000000000000000000000000000102314f3a9d42c01635a585f1721463842f8936075105f47000000000000000000000000000000000000000000000000000000000000000963617437316a70656700000000000000000000000000000000000000000000000000000000000000000000000001c600000000ffffffffffffff7fa861cdfc7d16d0c8c307640e01583c5edd0e41e3ae7aaff1660c0b17f3dccea31f4a358dd3c2085528cb29cacd29dc584749eadc8724278f5bec3c991d117b09e6b325f63a16bc205a8dfbc9ad71c82cf83f964741a44055a8e841d555ebfc11cdaf10da4b9c36a4b5b549eb2b799ce5c91adf638733166534141da75726e1d337591b610d1ed4007f73ae675677dda5fd13017b226c6561646572223a312c227672665f76616c7565223a22424d676f696f6f31386370412b66427554693865676139386e62354b36446e56377a6a4e4f6656776e35365632646a694a72454d6e69374a6a6a497464363868412b366542377a672f383453546266516451752f7243673d222c227672665f70726f6f66223a2250467a4578472b3845597269374a69347445642b516d44736a4b66467a495636376c35535364544c4b572f4531424c644636725455622f4e706d41707136653364327750744e6f765a6d6b70523757714a33696246513d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a31333839303736372c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014559396a714784bfac22992c776b1edd5cfd858df439bd7d8bd731309a3f40381d180812834184a175e1c943aa7701ae47d7da8c6987862ec8c68351069d82916a01780179b49a430b555d50e8b32b63ec6d88b1b6f838e1a4de6ee129f478a114dc3bbb9a71b398388757fbcf687a3c2c31017b905f9f9e07a90f5e8c951b682192011ecb8809393916c0a91513f50a46f419b8b7d7e99427ec337daad8c2a064b2a370d5419b3cffae707ec059af5b59dd19d354ca816fa7ee05e8b77815157181a2001db86618bc38bd2cd52776d072bc79c7fbafc93de3709dbaf2b6bb8cf5a222ff42c9d0482f4c4ab1285f62ca609d6c70da72c1e8c0e3d06a5dccdaa0150faadb015497b63ed74f809dd2e1621fb79658e08655aa72b91b6b2cac8de4a2c72cda620324c56f9edc2c9e75c076e6c209f5fa2b3a4ad1016d5611ee88af927b7fcc1101000000000000000000000000000000000000000000000000000000"
	enc, err := hexutil.Decode(input)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(hexutil.Encode(enc[:4]))

	//jsonstr := eccm_abi.EthCrossChainManagerABI
	jsonstr := nft_lock_proxy_abi.PolyNFTLockProxyABI
	ab, err := abi.JSON(strings.NewReader(jsonstr))
	if err != nil {
		t.Fatal(err)
	}

	// t.Log(ab.Methods[""])
	for _, m := range ab.Methods {
		t.Logf("method %s, method id %s", m.Name, hexutil.Encode(m.ID()))
	}

	t.Logf("unlock method hex: %s", hexutil.Encode([]byte("unlock")))
	//mtd := ab.Methods["verifyHeaderAndExecuteTx"]

	//data := struct{
	//
	//}
	//mtd.Inputs.Unpack()
}
